#-*-coding: utf-8-*-
# Exercise 34

import codecs, sys
outf = codecs.getwriter('cp866')(sys.stdout, errors = 'replace')
sys.stdout = outf

from sys import exit

def gold_room():
	print (u"Здесь полно золота. Сколько кг ты унесешь?")

	next = input("> ").decode(sys.stdin.encoding or locale.getpreferredencoding(True))

	if "0" in next or "1" in next:
		how_much = int(next)
	else:
		dead(u"Эй, надо ввести число!")

	if how_much < 50:
		print (u"Шикарно! Ты не жадный, поэтому выигрываешь!")
		exit(0)
	else:
		dead(u"Ах ты жадина!")

def bear_room():
	print (u"Здесь сидит медведь.")
	print (u"У медведя бочка с медом.")
	print (u"Медведь закрыл собой дверь выхода.")
	print (u"Как переместить медведя? Отобрать мед или подразнить медведя?")
	bear_moved = False

	while True:
		next = input("> ")
		if next == u"отобрать мед":
			dead (u"Медведь посмотрел на тебя и ударил лапой по лицу.")
		elif next == u"подразнить медведя" and not bear_moved:
			print (u"Медведь отошел от двери. Вы можете войти в нее. Подразнить медведя и ваойти дверь?")
			bear_moved = True
		elif next == u"подразнить медведя" and bear_moved:
			dead (u"Медведь разозлился и откусил тебе ногу.")
		elif next == u"войти в дверь" and bear_moved:
			gold_room()
		else:
			print (u"Понятия не имею, что происходит.")


def cthulhu_room():
	print (u"На вас смотрит великий и ужасный Ктулху.")
	print (u"Он смотрит на тебя, и ты начинаешь сходить с ума.")
	print (u"Убежать или съесть свою голову?")

	next = input("> ").decode(sys.stdin.encoding or locale.getpreferredencoding(True))

	if u"убежать" in next:
		start()
	elif u"съесть свою голову" in next:
		dead(u"Хм, а это даже и вкусно!")
	else:
		cthulhu_room

def dead(why):
	print (why, u"Великолепно!")
	exit(0)

def start():
	print (u"Ты в темной комнате.")
	print (u"Отсюда ведут две двери, налево и направо.")
	print (u"Куда ты повернешь?")

	next = input("> ").decode(sys.stdin.encoding or locale.getpreferredencoding(True))

	if next == u"налево":
		bear_room
	elif next == "направо":
		cthulhu_room
	else:
		dead(u"Ты ходишь из комнаты в комнату, пока не умираешь с голоду.")


start()	

#-*-coding: utf-8-*-
# Exercise 33

'''
i = 0
number = []

while i < 6:
    print (u"Вверху значение i равно %d" % i)
    number.append(i)

    i +=1
    print (u"Текущие значения: ", number)
    print (u"Внизу значение i равно %d" % i)

print (u'Значения: ')

for num in number:
	print (num)

# part II 

def number(a, b):
	i = 0
	list_=[]
	while i < a:
		print (u"Вверху значение i равно %d" % i)
		list_.append(i)

		i+=b
		print (u"Текущие значения: ", list_)
		print (u"Внизу значение i равно %d" % i)

	print (u"Значения: ")

	for num in list_:
		print (num)

print (u"Введите число")
a = input("> ")

print (u"Введите шаг")
b = input("> ")

number (int(a), int(b))

# part III

'''
def number(a, b):
	list_=[]
	for i in range (0, a, b):
		print (u"Вверху значение i равно %d" % i)
		list_.append(i)
		print (u"Текущие значения: ", list_)
		print (u"Внизу значение i равно %d" % i)

	print (u"Значения: ")

	for num in list_:
		print (num)

print (u"Введите число")
a = input("> ")

print (u"Введите шаг")
b = input("> ")

number (int(a), int(b))

#-*-coding: utf-8-*-
# Exercise 32

the_count = [1, 2, 3, 4, 5,]
fruits = [u'яблоко', u'апельсин', u'персик', u'абрикос']
change = [1, '25', 2, '50', 3, '75']

# цикл for первого типа обрабатывает список
for number in the_count:
    print (u'Счетчик %d' % number)

# то же, что и выше
for fruit in fruits:
    print (u'Фрукт: %s' % fruit)

# также можно обрабатывать смешанные списки
# обратите внимание, что используется оператор %r, так как неизвестен тип значения
for i in change:
	print (u"Я получил %r" % i)

# также мы можем создавать списки, начнем с пустого
elements = []

# затем используетсяd функция range для ограничения диапазона
for i in range(0, 6):
	print (u"Добавление %d в список." % i)

	# append - функция для добавления элементов в список
	elements.append(i)


# теперь мы их выводим
for i in elements:
	print (u'Номер элемента: %d' % i)
